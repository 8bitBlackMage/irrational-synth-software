//
// Created by alice on 15/03/2020.
//

#include "PDObject.h"


void PDObject::receiveMessage(const std::string &dest, const std::string &msg, const pd::List &list)
{
    if(msg == "control") ProcessControlMessage(msg,list);
    std::cout << msg << list <<  std::endl;


}

std::vector<ControlWidget> &PDObject::getVector() {
    return m_specContainer;
}



/* pure data patches are controlled by Irrational via the Sends and Recives
 * Controls are generated by the front end from ControlMessages, which tell the gui what UI elements to generate and what data to grab from it
 */
void PDObject::ProcessControlMessage(const std::string &msg, const pd::List &list)
{
//first element of the list tells the system what Control Element type it is
if(list.getSymbol(0) == "Slider" )
{
    //populate new Control widget with data for Slider
    ControlWidget ret;

    ret.WidgetType = WidgetTypeIndex::slider;


    //second element of the list tells us the name of the slider, which is then used to create a send from LibPD to the patch
    ret.WidgetName = list.getSymbol(1);

    //third element of the list is the minimum value for the slider
    ret.WidgetMinValue = list.getFloat(2);

    //forth element of the list is the max value for the slider
    ret.WidgetMaxValue = list.getFloat(3);

    //add this to the array
    m_specContainer.push_back(ret);
}
else if(list.getSymbol(0) == "ToggleButton" ){
    //populate new Control widget with data for Slider
    ControlWidget ret;

    ret.WidgetType = WidgetTypeIndex::toggle;


    //second element of the list tells us the name of the ToggleBox, which is then used to create a send from LibPD to the patch
    ret.WidgetName = list.getSymbol(1);
    if(list.getSymbol(2) == "on")  ret.WidgetDefaultState =true;
    else  if(list.getSymbol((2)) == "off") ret.WidgetDefaultState = false;

    //add this to the array
    m_specContainer.push_back(ret);
}

else if(list.getSymbol(0) == "PushButton"){
    ControlWidget ret;

    ret.WidgetType = WidgetTypeIndex::pushButton;


    ret.WidgetName = list.getSymbol(1);

    m_specContainer.push_back(ret);
}


}
